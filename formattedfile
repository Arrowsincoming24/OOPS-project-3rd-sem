/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.*;

// Generic class to store hotel or user data
class DataContainer<T> {
	private List<T> items;

	// Constructor
	public DataContainer() {
		this.items = new ArrayList<>();
	}

	// Add an item to the container
	public void add(T item) {
		items.add(item);
	}

	// Get all items
	public List<T> getAll() {
		return items;
	}
}

// Hotel class with sorting capabilities
class Hotel implements Comparable<Hotel> {
	static String sortParam = "name";
	String name;
	int roomAvl;
	String location;
	int rating;
	int pricePr;
	boolean wifi;
	boolean gym;
	boolean breakfast;

	// Constructor
	public Hotel(String name, int roomAvl, String location, int rating, int pricePr, boolean wifi, boolean gym, boolean breakfast) {
		this.name = name;
		this.roomAvl = roomAvl;
		this.location = location;
		this.rating = rating;
		this.pricePr = pricePr;
		this.wifi = wifi;
		this.gym = gym;
		this.breakfast = breakfast;
	}

	// Sorting parameter methods
	public static void sortByName() {
		sortParam = "name";
	}
	public static void sortByRate() {
		sortParam = "rating";
	}
	public static void sortByRoomAvailable() {
		sortParam = "roomAvl";
	}

	@Override
	public int compareTo(Hotel other) {
		switch (sortParam) {
		case "name":
			return this.name.compareTo(other.name);
		case "rating":
			return Integer.compare(this.rating, other.rating);
		case "roomAvl":
			return Integer.compare(this.roomAvl, other.roomAvl);
		default:
			return 0;
		}
	}

	@Override
	public String toString() {
		return "Hotel Name: " + this.name + "\n" +
		       "Rooms Available: " + this.roomAvl + "\n" +
		       "Location: " + this.location + "\n" +
		       "Rating: " + this.rating + "\n" +
		       "Price Per Room: " + this.pricePr + "\n" +
		       "WiFi: " + (wifi ? "Yes" : "No") + "\n" +
		       "Gym: " + (gym ? "Yes" : "No") + "\n" +
		       "Breakfast: " + (breakfast ? "Included" : "Not Included") + "\n";
	}
}

// User data class
class User {
	String uname;
	int uId;
	int cost;

	// Constructor
	public User(String uname, int uId, int cost) {
		this.uname = uname;
		this.uId = uId;
		this.cost = cost;
	}

	@Override
	public String toString() {
		return "User Name: " + this.uname + "\n" +
		       "User ID: " + this.uId + "\n" +
		       "Booking Cost: " + this.cost + "\n";
	}
}

// Sorting task class for multithreading
class SortByRatingTask extends Thread {
	private List<Hotel> hotels;

	public SortByRatingTask(List<Hotel> hotels) {
		this.hotels = hotels;
	}

	@Override
	public void run() {
		System.out.println("--- Sorting by Rating in a Separate Thread ---");
		Hotel.sortByRate();
		Collections.sort(hotels);
		for (Hotel h : hotels) {
			System.out.println(h);
		}
	}
}

// Filtering task class for multithreading
class FilterByLocationTask extends Thread {
	private List<Hotel> hotels;
	private String location;

	public FilterByLocationTask(List<Hotel> hotels, String location) {
		this.hotels = hotels;
		this.location = location;
	}

	@Override
	public void run() {
		System.out.println("--- Filtering by Location: " + location + " in a Separate Thread ---");
		for (Hotel h : hotels) {
			if (h.location.equals(location)) {
				System.out.println(h);
			}
		}
	}
}

public class Main {
	// Print hotel data with section headers
	public static <T> void printData(DataContainer<T> container) {
		System.out.println("--- Initial Hotel Data ---");
		for (T item : container.getAll()) {
			System.out.println(item);
		}
	}

	// Sort hotels by name with section header
	public static void sortHotelByName(List<Hotel> hotels) {
		System.out.println("--- Sorted by Name ---");
		Hotel.sortByName();
		Collections.sort(hotels);
		for (Hotel h : hotels) {
			System.out.println(h);
		}
	}

	// Print user data with corresponding hotels and section header
	public static void printUserData(String[] userName, int[] userId, int[] bookingCost, List<Hotel> hotels) {
		System.out.println("--- User Data with Booked Hotels ---");
		DataContainer<User> users = new DataContainer<>();
		for (int i = 0; i < 10; i++) {
			User u = new User(userName[i], userId[i], bookingCost[i]);
			users.add(u);
		}
		for (int i = 0; i < users.getAll().size(); i++) {
			System.out.println(users.getAll().get(i) + "Hotel Booked: " + hotels.get(i).name + "\n");
		}
	}

	// Hotel management function with multi-threaded tasks
	public static void hotelManagement(String[] userName, int[] userId, String[] hotelName, int[] bookingCost, int[] rooms, String[] locations, int[] ratings, int[] prices, boolean[] wifi, boolean[] gym, boolean[] breakfast) {
		// Initialize hotels data container
		DataContainer<Hotel> hotelsContainer = new DataContainer<>();

		// Add hotel data
		for (int i = 0; i < 10; i++) {
			Hotel h = new Hotel(hotelName[i], rooms[i], locations[i], ratings[i], prices[i], wifi[i], gym[i], breakfast[i]);
			hotelsContainer.add(h);
		}

		List<Hotel> hotels = hotelsContainer.getAll();
		printData(hotelsContainer);

		// Sort hotels by name
		sortHotelByName(hotels);

		// Start multithreaded sorting and filtering tasks
		SortByRatingTask sortByRatingTask = new SortByRatingTask(hotels);
		FilterByLocationTask filterByLocationTask = new FilterByLocationTask(hotels, "Bangalore");

		sortByRatingTask.start();
		filterByLocationTask.start();

		// Wait for threads to finish
		try {
			sortByRatingTask.join();
			filterByLocationTask.join();
		} catch (InterruptedException e) {
			System.out.println("Thread interrupted.");
		}

		// Print user data
		printUserData(userName, userId, bookingCost, hotels);
	}

	// Main function
	public static void main(String[] args) {
		String[] userName = {"U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9", "U10"};
		int[] userId = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
		String[] hotelName = {"H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10"};
		int[] bookingCost = {1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900};
		int[] rooms = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
		String[] locations = {"Bangalore", "Mumbai", "Delhi", "Bangalore", "Mumbai", "Delhi", "Bangalore", "Mumbai", "Delhi", "Bangalore"};
		int[] ratings = {5, 4, 3, 5, 4, 3, 5, 4, 3, 5};
		int[] prices = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
		boolean[] wifi = {true, false, true, false, true, false, true, false, true, false};
		boolean[] gym = {true, true, false, false, true, true, false, false, true, true};
		boolean[] breakfast = {true, false, true, false, true, false, true, false, true, false};

		// Perform hotel management operations
		hotelManagement(userName, userId, hotelName, bookingCost, rooms, locations, ratings, prices, wifi, gym, breakfast);
	}
}



